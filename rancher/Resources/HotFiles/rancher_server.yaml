heat_template_version: 2016-10-14

description: Single Instance template

parameter_groups:
  - label: Instance Configuration
    description: Instance settings
    parameters:
      - image_id
      - instance_type
      - key_name
      - network
      - os_volume_size
      - data_volume_size
      - data_volume_count
      - security_group
      - heat_stack_name
      - proxy
      - rancher_username
      - rancher_password
      - rancher_server_version
      - rancher_mariadb_server
      - mariadb_rancher_password
      - mariadb_output
      - server_type
      - rancher_master_ip

parameters:
  image_id:
    type: string
    label: Image ID
    description: Instance Image
    constraints:
      - custom_constraint: glance.image
  instance_type:
    type: string
    label: Instance Type
    description: Type of Instance
    constraints:
      - custom_constraint: nova.flavor
  key_name:
    type: string
    label: Key Name
    description: SSH Keys
    constraints:
      - custom_constraint: nova.keypair
  network:
    label: Network
    type: string
    description: Network
    constraints:
      - custom_constraint: neutron.network
  os_volume_size:
    label: OS Volume Size in GB
    type: number
    constraints:
    - range: { min: 10, max: 100 }
  data_volume_size:
    label: Data Volume Size in GB
    type: number
    constraints:
    - range: { min: 1, max: 100 }
  data_volume_count:
    label: Data Volume Count
    type: number
    constraints:
    - range: { min: 0, max: 10 }
  security_group:
    type: string
    description: Security group to apply to ports
  heat_stack_name:
    label: Main heat stack name
    type: string
  proxy:
    type: string
    description: Proxy URL
  rancher_username:
    type: string
    description: Rancher Admin username
  rancher_password:
    type: string
    description: Rancher Admin password
  rancher_server_version:
    type: string
    description: Rancher server version
  rancher_mariadb_server:
    type: string
    description: Rancher MariaDB server address
  mariadb_rancher_password:
    type: string
    description: MariaDB rancher password
  mariadb_output:
    type: string
    description: MariaDB server provisioning output
  server_type:
    type: string
    description: Set "primary" for primary Rancher server
  rancher_master_ip:
    type: string
    description: IP address for master Rancher server
    default: "127.0.0.1"

conditions:
  is_primary: { equals : [ { get_param: server_type }, "primary" ] }

resources:
  random_hostname:
    type: OS::Heat::RandomString
    properties:
      length: 8
      character_classes: [ {"min": 6, "class": lowercase}, {"min": 2, "class": digits} ]

  rancher_access_key:
    type: OS::Heat::RandomString
    properties:
      length: 20
      sequence: lettersdigits

  rancher_secret_key:
    type: OS::Heat::RandomString
    properties:
      length: 40
      sequence: lettersdigits

  os_volume:
    type: OS::Cinder::Volume
    properties:
      size: { get_param: os_volume_size }
      image: { get_param: image_id }
      description: OS Volume

  network_port:
    type: OS::Neutron::Port
    properties:
      network: { get_param: network }
      security_groups:
        - default
        - { get_param: security_group }

  data_volumes:
    type: OS::Heat::ResourceGroup
    properties:
      count: { get_param: data_volume_count }
      resource_def:
        type: fragments/volumes.yaml
        properties:
          instance_id: { get_resource: instance }
          volume_size: { get_param: data_volume_size }

  wait_condition:
    type: OS::Heat::WaitCondition
    properties:
      handle: { get_resource: wait_handle }
      count: 1
      timeout: 600

  wait_handle:
    type: OS::Heat::WaitConditionHandle

  software_config:
    type: OS::Heat::SoftwareConfig
    properties:
      group: script
      config:
        str_replace:
          params:
            $PROXY_URL: { get_param: proxy }
            $RANCHER_USERNAME:  { get_param: rancher_username }
            $RANCHER_PASSWORD:  { get_param: rancher_password }
            $RANCHER_SERVER_VERSION:  { get_param: rancher_server_version }
            $RANCHER_MARIADB_SERVER:  { get_param: rancher_mariadb_server }
            $MARIADB_RANCHER_PASSWORD:  { get_param: mariadb_rancher_password }
            $RANCHER_ACCESS_KEY:  { get_attr: [ rancher_access_key, value ] }
            $RANCHER_SECRET_KEY:  { get_attr: [ rancher_secret_key, value ] }
            $SERVER_TYPE: { get_param: server_type }
            $MASTER_IP: { get_param: rancher_master_ip }
            $WC_NOTIFY: { get_attr: [ 'wait_handle', 'curl_cli' ] }
          template: { if: [ "is_primary", { get_file: scripts/rancher_master.sh }, { get_file: scripts/rancher_slave.sh } ] }

  software_deployment:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_resource: software_config
      server:
        get_resource: instance

  instance:
    type: OS::Nova::Server
    properties:
      name:
        str_replace:
          template: "%STACK_NAME%-server-%RANDOM_HOSTNAME%"
          params:
            '%STACK_NAME%':      { get_param: heat_stack_name }
            '%RANDOM_HOSTNAME%': { get_attr: [ random_hostname, value ] }
      flavor: { get_param: instance_type }
      key_name: { get_param: key_name }
      networks:
        - port: { get_resource: network_port }
      block_device_mapping_v2:
        - device_name: sda
          volume_id: { get_resource: os_volume }
          delete_on_termination: true
      user_data_format: SOFTWARE_CONFIG

outputs:
  networks:
    description: Network block for the Instance
    value: { get_attr: [ instance, networks ] }

  instance_ip:
    description: The IP address of the Instance
    value: { get_attr: [ instance, first_address ] }

  rancher_access_key:
    description: Rancher Access Key
    value: { get_attr: [ rancher_access_key, value ] }

  rancher_secret_key:
    description: Rancher Secret Key
    value: { get_attr: [ rancher_secret_key, value ] }

  software_deployment_stdout:
    value: { get_attr: [ software_deployment, deploy_stdout ] }
